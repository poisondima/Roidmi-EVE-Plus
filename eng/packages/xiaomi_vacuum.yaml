xiaomi_vacuum:
  homeassistant:
    customize:
      vacuum.vacuum_cleaner_robot_cleaner:
        miot_local: true         # Force to read and write data in LAN
        miot_cloud: false        # Enable miot cloud for entity (read, write, action)
        #miot_cloud_write: true  # (Optional) Enable miot cloud (only write)
        miot_cloud_action: true  # (Optional) Enable miot cloud (only action)
      sensor.vacuum_cleaner_battery_level:
        friendly_name: 'Charge level'
        icon: 'mdi:battery'
      sensor.vacuum_charging_state:
        friendly_name: 'Charging status'
        icon: 'mdi:state-machine'
      sensor.vacuum_status:
        friendly_name: 'Mode of operation'
        icon: 'mdi:state-machine'
      sensor.vacuum_status_fix:
        friendly_name: 'Vacuum Cleaner Status'
        icon: 'mdi:autorenew'
      sensor.vacuum_sweep_mode:
        friendly_name: 'Cleaning type'
        icon: 'mdi:format-list-bulleted-type'
      sensor.vacuum_fan_speed:
        friendly_name: 'Fan speed'
        icon: 'mdi:speedometer'
      sensor.vacuum_fault:
        friendly_name: 'Error'
        icon: 'mdi:alert-circle'
      sensor.vacuum_on:
        friendly_name: 'Switch state'
        icon: 'mdi:nintendo-switch'
      binary_sensor.vacuum_mop:
        friendly_name: 'Water container'
        icon: 'mdi:cup-water'
      sensor.vacuum_cleaner_filter_life_level:
        friendly_name: 'Percentage left'
        icon: 'mdi:percent-outline'
      sensor.vacuum_cleaner_filter_left_time:
        friendly_name: 'Time left'
        icon: 'mdi:calendar-clock'
      sensor.vacuum_cleaner_brush_life_level:
        friendly_name: 'Percentage left'
        icon: 'mdi:percent-outline'
      sensor.vacuum_cleaner_brush_left_time:
        friendly_name: 'Time left'
        icon: 'mdi:calendar-clock'
      sensor.vacuum_cleaner_brush_life_level_2:
        friendly_name: 'Percentage left'
        icon: 'mdi:percent-outline'
      sensor.vacuum_cleaner_brush_left_time_2:
        friendly_name: 'Time left'
        icon: 'mdi:calendar-clock'
      sensor.vacuum_cleaner_brush_life_level_3:
        friendly_name: 'Percentage left'
        icon: 'mdi:percent-outline'
      sensor.vacuum_cleaner_brush_left_time_3:
        friendly_name: 'Time left'
        icon: 'mdi:calendar-clock'
      sensor.vacuum_cleaning_time:
        friendly_name: 'Time of last harvest'
        unit_of_measurement: 'min.'
        icon: 'mdi:timer-outline'
      sensor.vacuum_total_cleaning_time:
        friendly_name: 'Total cleaning time'
        unit_of_measurement: 'min.'
        icon: 'mdi:timer-outline'
      sensor.vacuum_cleaned_area:
        friendly_name: 'Area of the last cleaning'
        unit_of_measurement: 'm ²'
        icon: 'mdi:ruler'
      sensor.vacuum_total_cleaned_area:
        friendly_name: 'Total cleaning area'
        unit_of_measurement: 'm ²'
        icon: 'mdi:ruler'
      sensor.vacuum_cleaning_count:
        friendly_name: 'Number of cleanings'
        icon: 'mdi:robot-vacuum'
      sensor.vacuum_operation:
        friendly_name: 'Operation'
      sensor.vacuum_accessories:
        friendly_name: 'Working time'

  # roidmi.vacuum.v60 (Roidmi EVE Plus)
  xiaomi_miot:
    username: !secret xiaomi_cloud_username
    password: !secret xiaomi_cloud_password
    # server_country: cn
    device_customizes:
      roidmi.vacuum.v60:
        exclude_miot_services: map
  camera:
    - platform: xiaomi_cloud_map_extractor
      host: !secret xiaomi_vacuum_host
      token: !secret xiaomi_vacuum_token
      username: !secret xiaomi_cloud_username
      password: !secret xiaomi_cloud_password
      #store_map: true
      force_api: roidmi
      country: "cn"
      colors:
        color_map_inside: [32, 115, 185]
        color_map_outside: [230, 233, 238] #colors on the outside of the card
        color_map_wall: [91, 96, 99]       #wall color
        color_map_wall_v2: [93, 109, 126]
        color_grey_wall: [93, 109, 126]
        color_path: [255, 255, 255]
        color_goto_path: [0, 255, 0]
        color_predicted_path: [255, 255, 0, 0]
        color_zones: [0xAD, 0xD8, 0xFF, 0x8F]
        color_zones_outline: [0xAD, 0xD8, 0xFF]
        color_virtual_walls: [255, 0, 0]
        color_no_go_zones: [255, 33, 55, 127]
        color_no_go_zones_outline: [255, 0, 0]
        color_no_mop_zones: [163, 130, 211, 127]
        color_no_mop_zones_outline: [163, 130, 211]
        color_charger: [0, 255, 0]
        color_robo: [65, 65, 235]
        color_unknown: [0, 0, 0]
        color_scan: [0xDF, 0xDF, 0xDF]
      draw:
        - charger
        - path
        - goto_path
        - predicted_path
        - no_go_zones
        - no_mopping_zones
        - vacuum_position
        - virtual_walls
        #- zones
  #    texts:
  #      - text: "Room 1"
  #        x: 25
  #        y: 25
  #        color: [125, 20, 213]
  #      - text: "Room 2"
  #        x: 25
  #        y: 75
  #        color: [125, 20, 213, 127]
  #        font_size: 25
  #    map_transformation:
  #      #scale: 1
  #      #rotate: 0
  #      trim:
  #        top: 20
  #        bottom: 18
  #        left: 25
  #        right: 20
      sizes:
        charger_radius: 3.5
        vacuum_radius: 3.5
      attributes:
        - calibration_points
        - charger
        - goto
        - goto_path
        - goto_predicted_path
        - image
        - map_name
        #- no_go_areas
        #- no_mopping_areas
        - obstacles
        - path
        - room_numbers
        - rooms
        - vacuum_position
        - vacuum_room
        - walls
        - zones
      scan_interval:
        seconds: 10
      auto_update: false

  template:
    - sensor:
        - name: "vacuum_operation"
          state: 'Operation'
        - name: "vacuum_accessories"
          state: 'Working time'
        - name: "vacuum_status_fix"
          state:  >
            {% set val =  state_attr('vacuum.vacuum_cleaner_robot_cleaner','vacuum.status')  %}
            {% if val == 1 %}
              Sleeping
            {% elif val == 2 %}
              In Standby
            {% elif val == 3 %}
              Suspend
            {% elif val == 4 %}
              Cleaning
            {% elif val == 5 %}
              Go Charging
            {% elif val == 6 %}
              Charging
            {% elif val == 7 %}
              Fault
            {% elif val == 8 %}
              Remote control
            {% elif val == 9 %}
              The battery is full
            {% elif val == 10 %}
              Shut down
            {% elif val == 11 %}
              Recharge pause
            {% else %}
              Device offline
            {% endif %}
        - name: "vacuum_fan_speed"
          state: "{{ state_attr('vacuum.vacuum_cleaner_robot_cleaner','fan_speed') }}"
        - name: "vacuum_status"
          state: "{{ state_attr('vacuum.vacuum_cleaner_robot_cleaner','vacuum.status') }}"
        - name: "vacuum_fault"
          state: >
            {% set val = state_attr('vacuum.vacuum_cleaner_robot_cleaner','vacuum.fault')  %}
            {% if (val == 0) or (val == None) %}
              No Faults
            {% elif val == 1 %}
              Low battery, start recharging
            {% elif val == 2 %}
              Low power, start shutting down
            {% elif val == 3 %}
              The main wheel is abnormal, please check whether the main wheel is stuck
            {% elif val == 4 %}
              Please check if the edge is jammed
            {% elif val == 5 %}
              Machine tilt, please move to level and start
            {% elif val == 6 %}
              Please check whether the top radar is blocked or jammed
            {% elif val == 7 %}
              Front collision sensor abnormal
            {% elif val == 8 %}
              Abnormal sensor on the right side along the wall
            {% elif val == 9 %}
              Please check whether the main brush is entangled or jammed
            {% elif val == 10 %}
              Please check whether the side brush is entangled or jammed
            {% elif val == 11 %}
              Abnormal fan
            {% elif val == 12 %}
              The radar cover is jammed
            {% elif val == 13 %}
              Please clean the dust box and filter screen, or check whether the dust box and filter screen are in place
            {% elif val == 14 %}
              Take out the dust box
            {% elif val == 15 %}
              Please clean the dust box and filter screen
            {% elif val == 16 %}
              The machine is trapped, please move to the new position and start
            {% elif val == 17 %}
              The machine is suspended. Please put it back on the level ground before starting
            {% elif val == 18 %}
              The water tank has been taken out. Please put it back into the water tank before starting
            {% elif val == 19 %}
              There is not enough water in the tank
            {% elif val == 20 %}
              The specified area cannot be reached
            {% elif val == 21 %}
              Please move out of the restricted area before starting
            {% elif val == 22 %}
              Please stay away from the cliff before starting
            {% elif val == 23 %}
              Pump current error
            {% elif val == 24 %}
              Recharge failed, charging point not found
            {% elif val == 25 %}
              Radar speed error
            {% elif val == 27 %}
              Please check whether the top radar is jammed
            {% elif val == 30 %}
              Radar open circuit abnormal
            {% elif val == 31 %}
              Battery abnormal
            {% elif val == 32 %}
              Middle brush abnormal
            {% elif val == 33 %}
              Main wheel abnormal
            {% elif val == 34 %}
              Side brush abnormal
            {% elif val == 35 %}
              Fan abnormal
            {% elif val == 37 %}
              Firmware upgrade failed due to insufficient conditions
            {% else %}
              Unknown error №{{state_attr('vacuum.vacuum_cleaner_robot_cleaner','vacuum.fault')}}
            {% endif %}
        - name: "vacuum_on"
          state: >
            {% set val = state_attr('vacuum.vacuum_cleaner_robot_cleaner','vacuum.on') %}
            {% if val == 0 %}
              Close
            {% elif val == 1 %}
              Open
            {% else %}
              Unknown
            {% endif %}
        - name: "vacuum_charging_state"
          state: >
            {% set val = state_attr('vacuum.vacuum_cleaner_robot_cleaner','battery.charging_state') %}
            {% if val == 1 %}
              Charging
            {% elif val == 2 %}
              No charging
            {% elif val == 3 %}
              No need
            {% else %}
              Unknown
            {% endif %}
        - name: "vacuum_sweep_mode"
          state: >
            {% set val = state_attr('vacuum.vacuum_cleaner_robot_cleaner','sweep.sweep_mode') %}
            {% if val == 0 %}
              Waiting
            {% elif val == 1 %}
              Cleaning the entire apartment
            {% elif val == 2 %}
              Cleaning the area
            {% elif val == 3 %}
              Local cleaning
            {% elif val == 4 %}
              Moving to the point
            {% elif val == 7 %}
              Smart
            {% elif val == 8 %}
              Cleaning the segment
            {% elif val == 9 %}
              DepthTotal
            {% elif val == 10 %}
              Along the wall
            {% else %}
              Unknown
            {% endif %}
        - name: "vacuum_station_type"
          state: "{{ state_attr('vacuum.vacuum_cleaner_robot_cleaner','custom.station_type') }}"
        - name: "vacuum_cleaning_time"
          state: >
            {% if (state_attr('vacuum.vacuum_cleaner_robot_cleaner','custom.clean_time') == None) %}
              0
            {% else %}
              {{(state_attr('vacuum.vacuum_cleaner_robot_cleaner','custom.clean_time')/60)|round(1)}}
            {% endif %}
        - name: "vacuum_total_cleaning_time"
          state: >
            {% if (state_attr('vacuum.vacuum_cleaner_robot_cleaner','custom.total_clean_time') == None) %}
              0
            {% else %}
              {{(state_attr('vacuum.vacuum_cleaner_robot_cleaner','custom.total_clean_time')/60)|round(1)}}
            {% endif %}
        - name: "vacuum_cleaned_area"
          state: "{{ state_attr('vacuum.vacuum_cleaner_robot_cleaner','custom.clean_area') }}"
        - name: "vacuum_total_cleaned_area"
          state: "{{ state_attr('vacuum.vacuum_cleaner_robot_cleaner','custom.total_clean_areas') }}"
        - name: "vacuum_cleaning_count"
          state: "{{ state_attr('vacuum.vacuum_cleaner_robot_cleaner','custom.clean_counts') }}"
    - binary_sensor:
        - name: "vacuum_mop"
          state: "{{ state_attr('vacuum.vacuum_cleaner_robot_cleaner','custom.mop') }}"

  input_boolean:
    vacuum_lidar_collision:
      name: 'Collision Radar'
      icon: 'mdi:radar'
    vacuum_led_switch:
      name: 'Button light'
      icon: 'mdi:alarm-light'
    vacuum_auto_boost:
      name: 'Carpet inflation mode'
      icon: 'mdi:rug'
    vacuum_double_clean:
      name: 'Cleaning x2'
      icon: 'mdi:map-marker-distance'
    vacuum_edge_sweep:
      name: 'Y-Mopping'
      icon: 'mdi:transit-detour'
    vacuum_station_key:
      name: 'Display status when touched'
      icon: 'mdi:account-arrow-right'
    vacuum_station_led:
      name: 'Display backlight'
      icon: 'mdi:lightbulb-on-outline'
    vacuum_mute:
      name: 'Silent mode'
      icon: 'mdi:volume-off'
    vacuum_room1:
      name: 'Hallway'
      icon: 'mdi:mirror'
    vacuum_room2:
      name: 'Hall'
      icon: 'mdi:sofa'
    vacuum_room3:
      name: 'Bedroom'
      icon: 'mdi:bed'
    vacuum_room4:
      name: 'Kitchen'
      icon: 'mdi:silverware-variant'
    vacuum_room5:
      name: 'Children'
      icon: 'mdi:desktop-classic'
    vacuum_room6:
      name: 'Corridor'
      icon: 'mdi:doorbell'

  input_number:
    vacuum_volume:
      name: 'Volume level'
      icon: 'mdi:volume-high'
      unit_of_measurement: '%'
      min: 0
      max: 100
      step: 1

  input_select:
    vacuum_water_level:
      name: 'Water use'
      icon: 'mdi:waves'
      options:
       - No water
       - Small
       - Middle
       - MAX
    vacuum_work_station_freq:
      name: 'Throwing away trash'
      icon: 'mdi:delete'
      options:
       - Not to throw away
       - Every time
       - Every second
       - Every third
    vacuum_mode:
      name: 'Cleaning power'
      icon: 'mdi:wind-power-outline'
      options:
       - Sweep
       - Silent
       - Basic
       - Strong
       - Full Speed
    vacuum_sweep_type:
      name: 'Cleaning function'
      icon: 'mdi:vacuum-outline'
      options:
       - Sweep
       - Mop
       - Mop And Sweep

  automation:
    # The vacuum cleaner started cleaning
    - alias: 'vacuum_start_cleaning'
      mode: queued
      trigger:
        - platform: state
          entity_id: sensor.vacuum_status
          from: '9'
          to: '4'
        - platform: state
          entity_id: sensor.vacuum_status
          from: '6'
          to: '4'
      action:
        - service: script.turn_on
          entity_id: script.telegram_send_message
          data:
            variables:
              emoji: "\U0001F9F9"
              message: 'The vacuum cleaner started cleaning'
              target:
                - !secret telegram_bot_chat_id_poison
                - !secret telegram_bot_chat_id_sasha
              sound: "auto"

    # Vacuum cleaner finished cleaning
    - alias: 'vacuum_end_cleaning'
      mode: queued
      trigger:
        - platform: state
          entity_id: sensor.vacuum_status
          from: '4'
          to: '5'
        - platform: state
          entity_id: sensor.vacuum_status
          from: '4'
          to: '9'
      action:
        - service: script.turn_on
          data:
            entity_id: script.vacuum_download_map
        - delay: '00:00:30'
        - service: camera.snapshot
          data_template:
            entity_id: 'camera.xiaomi_cloud_map_extractor'
            filename: '/config/www/xiaomi_vacuum_cleaner_map.jpg'
        - service: telegram_bot.send_photo
          data_template:
            file: '/config/www/xiaomi_vacuum_cleaner_map.jpg'
            caption: "\U00002705 Vacuum cleaner removed {{states('sensor.vacuum_cleaned_area')}} m² in {{states('sensor.vacuum_cleaning_time')}} minutes."
            target:
              - !secret telegram_bot_chat_id_poison
              - !secret telegram_bot_chat_id_sasha
        - condition: template
          value_template: |
                {% if states('sensor.vacuum_cleaner_brush_life_level')|int(100) <=5 or 
                states('sensor.vacuum_cleaner_brush_life_level_2')|int(100) <=5 or 
                states('sensor.vacuum_cleaner_brush_life_level_3')|int(100) <=5 or 
                states('sensor.vacuum_cleaner_filter_life_level')|int(100) <=5 %}True{% else %}False{% endif %}
        - service: script.turn_on
          entity_id: script.telegram_send_message
          data:
            variables:
              emoji: "\U000026A0"
              message: |
                {%- set text = '' %}
                {%- if states('sensor.vacuum_cleaner_brush_life_level')|int(100) <=5 %}{% set text = 'replace the brush at the bottom' %}{% endif %}
                {%- if states('sensor.vacuum_cleaner_brush_life_level_2')|int(100) <=5 %}{% set text = 'replace the side brush' %}{% endif %}
                {%- if states('sensor.vacuum_cleaner_brush_life_level_3')|int(100) <=5 %}{% set text = 'wipe the sensors' %}{% endif %}
                {%- if states('sensor.vacuum_cleaner_filter_life_level')|int(100) <=5 %}{% set text = 'replace the HEPA filter' %}{% endif %}
                Needed: {{text}}
              target:
                - !secret telegram_bot_chat_id_poison
                - !secret telegram_bot_chat_id_sasha
              sound: "auto"

    # Mistake with the vacuum cleaner
    - alias: 'vacuum_show_error'
      mode: queued
      trigger:
        - platform: state
          entity_id: sensor.vacuum_fault
      condition:
        condition: template
        value_template: "{% if is_state_attr('vacuum.vacuum_cleaner_robot_cleaner','vacuum.fault',0) or is_state_attr('vacuum.vacuum_cleaner_robot_cleaner','vacuum.fault',None) %}False{% else %}True{% endif %}"
      action:
        - service: script.turn_on
          entity_id: script.telegram_send_message
          data:
            variables:
              emoji: "\U0001F9F9"
              message: "Mistake with the vacuum cleaner №{{state_attr('vacuum.vacuum_cleaner_robot_cleaner','vacuum.fault')}}. Description: {{states('sensor.vacuum_fault')}}."
              target:
                - !secret telegram_bot_chat_id_poison
                - !secret telegram_bot_chat_id_sasha
              sound: "auto"

    # get the values from the vacuum cleaner
    - alias: vacuum_get_miot_property
      mode: queued
      trigger:
        platform: state
        entity_id: vacuum.vacuum_cleaner_robot_cleaner
      condition:
        condition: template
        value_template: "{% if states('vacuum.vacuum_cleaner_robot_cleaner') == 'unavailable' %}False{% else %}True{% endif %}"
      action:
        - service_template: >
            {% if is_state_attr('vacuum.vacuum_cleaner_robot_cleaner', 'custom.led_switch', 1) %}
              input_boolean.turn_on
            {% else %}
              input_boolean.turn_off
            {% endif %}
          data:
            entity_id: input_boolean.vacuum_led_switch
        - service_template: >
            {% if is_state_attr('vacuum.vacuum_cleaner_robot_cleaner', 'custom.lidar_collision', 1) %}
              input_boolean.turn_on
            {% else %}
              input_boolean.turn_off
            {% endif %}
          data:
            entity_id: input_boolean.vacuum_lidar_collision
        - service_template: >
            {% if is_state_attr('vacuum.vacuum_cleaner_robot_cleaner', 'custom.auto_boost', 1) %}
              input_boolean.turn_on
            {% else %}
              input_boolean.turn_off
            {% endif %}
          data:
            entity_id: input_boolean.vacuum_auto_boost
        - service: input_number.set_value
          entity_id: input_number.vacuum_volume
          data_template:
            value: '{{ state_attr("vacuum.vacuum_cleaner_robot_cleaner","speaker.volume") }}'
        - service_template: >
            {% if is_state_attr('vacuum.vacuum_cleaner_robot_cleaner', 'custom.double_clean', 1) %}
              input_boolean.turn_on
            {% else %}
              input_boolean.turn_off
            {% endif %}
          data:
            entity_id: input_boolean.vacuum_double_clean
        - service_template: >
            {% if is_state_attr('vacuum.vacuum_cleaner_robot_cleaner', 'map.path_type', 1) %}
              input_boolean.turn_on
            {% else %}
              input_boolean.turn_off
            {% endif %}
          data:
            entity_id: input_boolean.vacuum_edge_sweep
        - service: input_select.select_option
          entity_id: input_select.vacuum_water_level
          data_template:
            option: >
              {%- if is_state_attr('vacuum.vacuum_cleaner_robot_cleaner','custom.water_level',0) -%}
                No water
              {%- elif is_state_attr('vacuum.vacuum_cleaner_robot_cleaner','custom.water_level',1) -%}
                Small
              {%- elif is_state_attr('vacuum.vacuum_cleaner_robot_cleaner','custom.water_level',2) -%}
                Middle
              {%- elif is_state_attr('vacuum.vacuum_cleaner_robot_cleaner','custom.water_level',3) -%}
                MAX
              {%- else -%}
              {%- endif -%}
        - service_template: >
            {% if is_state_attr('vacuum.vacuum_cleaner_robot_cleaner', 'custom.station_key', 1) %}
              input_boolean.turn_on
            {% else %}
              input_boolean.turn_off
            {% endif %}
          data:
            entity_id: input_boolean.vacuum_station_key
        - service_template: >
            {% if is_state_attr('vacuum.vacuum_cleaner_robot_cleaner', 'custom.station_led', 1) %}
              input_boolean.turn_on
            {% else %}
              input_boolean.turn_off
            {% endif %}
          data:
            entity_id: input_boolean.vacuum_station_led
        - service_template: >
            {% if is_state_attr('vacuum.vacuum_cleaner_robot_cleaner', 'speaker.mute', 1) %}
              input_boolean.turn_on
            {% else %}
              input_boolean.turn_off
            {% endif %}
          data:
            entity_id: input_boolean.vacuum_mute
        - service: input_select.select_option
          entity_id: input_select.vacuum_work_station_freq
          data_template:
            option: >
              {%- if is_state_attr('vacuum.vacuum_cleaner_robot_cleaner','custom.work_station_freq',0) -%}
                Not to throw away
              {%- elif is_state_attr('vacuum.vacuum_cleaner_robot_cleaner','custom.work_station_freq',1) -%}
                Every time
              {%- elif is_state_attr('vacuum.vacuum_cleaner_robot_cleaner','custom.work_station_freq',2) -%}
                Every second
              {%- elif is_state_attr('vacuum.vacuum_cleaner_robot_cleaner','custom.work_station_freq',3) -%}
                Every third
              {%- else -%}
              {%- endif -%}
        - service: input_select.select_option
          entity_id: input_select.vacuum_mode
          data_template:
            option: >
              {%- if is_state_attr('vacuum.vacuum_cleaner_robot_cleaner','vacuum.mode',0) -%}
                Sweep
              {%- elif is_state_attr('vacuum.vacuum_cleaner_robot_cleaner','vacuum.mode',1) -%}
                Silent
              {%- elif is_state_attr('vacuum.vacuum_cleaner_robot_cleaner','vacuum.mode',2) -%}
                Basic
              {%- elif is_state_attr('vacuum.vacuum_cleaner_robot_cleaner','vacuum.mode',3) -%}
                Strong
              {%- elif is_state_attr('vacuum.vacuum_cleaner_robot_cleaner','vacuum.mode',4) -%}
                Full Speed
              {%- else -%}
              {%- endif -%}
        - service: input_select.select_option
          entity_id: input_select.vacuum_sweep_type
          data_template:
            option: >
              {%- if is_state_attr('vacuum.vacuum_cleaner_robot_cleaner','vacuum.sweep_type',0) -%}
                Sweep
              {%- elif is_state_attr('vacuum.vacuum_cleaner_robot_cleaner','vacuum.sweep_type',1) -%}
                Mop
              {%- elif is_state_attr('vacuum.vacuum_cleaner_robot_cleaner','vacuum.sweep_type',2) -%}
                Mop And Sweep
              {%- else -%}
              {%- endif -%}

    # set the values in the vacuum cleaner
    - alias: vacuum_set_miot_property
      mode: queued
      trigger:
        - platform: state
          entity_id: input_boolean.vacuum_led_switch
          id: 'led_switch'
        - platform: state
          entity_id: input_boolean.vacuum_lidar_collision
          id: 'lidar_collision'
        - platform: state
          entity_id: input_boolean.vacuum_auto_boost
          id: 'auto_boost'
        - platform: state
          entity_id: input_number.vacuum_volume
          id: 'volume'
        - platform: state
          entity_id: input_boolean.vacuum_double_clean
          id: 'double_clean'
        - platform: state
          entity_id: input_boolean.vacuum_edge_sweep
          id: 'edge_sweep'
        - platform: state
          entity_id: input_select.vacuum_water_level
          id: 'water_level'
        - platform: state
          entity_id: input_boolean.vacuum_station_key
          id: 'station_key'
        - platform: state
          entity_id: input_boolean.vacuum_station_led
          id: 'station_led'
        - platform: state
          entity_id: input_boolean.vacuum_mute
          id: 'mute'
        - platform: state
          entity_id: input_select.vacuum_work_station_freq
          id: 'work_station_freq'
        - platform: state
          entity_id: input_select.vacuum_mode
          id: 'vacuum_mode'
        - platform: state
          entity_id: input_select.vacuum_sweep_type
          id: 'vacuum_sweep_type'
      condition:
        - condition: template
          value_template: '{{ trigger.to_state.context.parent_id == none }}'
      action:
        - choose:
            - conditions:
                - condition: trigger
                  id: "led_switch"
              sequence:
                - service: xiaomi_miot.set_miot_property
                  data:
                    entity_id: vacuum.vacuum_cleaner_robot_cleaner
                    did: !secret xiaomi_cloud_did
                    siid: 8
                    piid: 22
                    value: "{{ 0 if is_state('input_boolean.vacuum_led_switch', 'off') else 1 }}"
            - conditions:
                - condition: trigger
                  id: "lidar_collision"
              sequence:
                - service: xiaomi_miot.set_miot_property
                  data:
                    entity_id: vacuum.vacuum_cleaner_robot_cleaner
                    did: !secret xiaomi_cloud_did
                    siid: 8
                    piid: 23
                    value: "{{ 0 if is_state('input_boolean.vacuum_lidar_collision', 'off') else 1 }}"
            - conditions:
                - condition: trigger
                  id: "auto_boost"
              sequence:
                - service: xiaomi_miot.set_miot_property
                  data:
                    entity_id: vacuum.vacuum_cleaner_robot_cleaner
                    did: !secret xiaomi_cloud_did
                    siid: 8
                    piid: 9
                    value: "{{ 0 if is_state('input_boolean.vacuum_auto_boost', 'off') else 1 }}"
            - conditions:
                - condition: trigger
                  id: "volume"
              sequence:
                - service: xiaomi_miot.set_miot_property
                  data:
                    entity_id: vacuum.vacuum_cleaner_robot_cleaner
                    did: !secret xiaomi_cloud_did
                    siid: 9
                    piid: 1
                    value: "{{states('input_number.vacuum_volume')|round(0)}}"
            - conditions:
                - condition: trigger
                  id: "double_clean"
              sequence:
                - service: xiaomi_miot.set_miot_property
                  data:
                    entity_id: vacuum.vacuum_cleaner_robot_cleaner
                    did: !secret xiaomi_cloud_did
                    siid: 8
                    piid: 20
                    value: "{{ 0 if is_state('input_boolean.vacuum_double_clean', 'off') else 1 }}"
            - conditions:
                - condition: trigger
                  id: "edge_sweep"
              sequence:
                - service: xiaomi_miot.set_miot_property
                  data:
                    entity_id: vacuum.vacuum_cleaner_robot_cleaner
                    did: !secret xiaomi_cloud_did
                    siid: 13
                    piid: 8
                    value: "{{ 0 if is_state('input_boolean.vacuum_edge_sweep', 'off') else 1 }}"
            - conditions:
                - condition: trigger
                  id: "water_level"
              sequence:
                - service: xiaomi_miot.set_miot_property
                  data:
                    entity_id: vacuum.vacuum_cleaner_robot_cleaner
                    did: !secret xiaomi_cloud_did
                    siid: 8
                    piid: 11
                    value: >
                       {%- if is_state("input_select.vacuum_water_level", "No water") -%}
                         0
                       {%- elif is_state("input_select.vacuum_water_level", "Small") -%}
                         1
                       {%- elif is_state("input_select.vacuum_water_level", "Middle") -%}
                         2
                       {%- elif is_state("input_select.vacuum_water_level", "MAX") -%}
                         3
                       {% else %}
                       {% endif %}
            - conditions:
                - condition: trigger
                  id: "station_key"
              sequence:
                - service: xiaomi_miot.set_miot_property
                  data:
                    entity_id: vacuum.vacuum_cleaner_robot_cleaner
                    did: !secret xiaomi_cloud_did
                    siid: 8
                    piid: 24
                    value: "{{ 0 if is_state('input_boolean.vacuum_station_key', 'off') else 1 }}"
            - conditions:
                - condition: trigger
                  id: "station_led"
              sequence:
                - service: xiaomi_miot.set_miot_property
                  data:
                    entity_id: vacuum.vacuum_cleaner_robot_cleaner
                    did: !secret xiaomi_cloud_did
                    siid: 8
                    piid: 25
                    value: "{{ 0 if is_state('input_boolean.vacuum_station_led', 'off') else 1 }}"
            - conditions:
                - condition: trigger
                  id: "mute"
              sequence:
                - service: xiaomi_miot.set_miot_property
                  data:
                    entity_id: vacuum.vacuum_cleaner_robot_cleaner
                    did: !secret xiaomi_cloud_did
                    siid: 9
                    piid: 2
                    value: "{{ 0 if is_state('input_boolean.vacuum_mute', 'off') else 1 }}"
            - conditions:
                - condition: trigger
                  id: "work_station_freq"
              sequence:
                - service: xiaomi_miot.set_miot_property
                  data:
                    entity_id: vacuum.vacuum_cleaner_robot_cleaner
                    did: !secret xiaomi_cloud_did
                    siid: 8
                    piid: 2
                    value: >
                       {%- if is_state("input_select.vacuum_work_station_freq", "Not to throw away") -%}
                         0
                       {%- elif is_state("input_select.vacuum_work_station_freq", "Every time") -%}
                         1
                       {%- elif is_state("input_select.vacuum_work_station_freq", "Every second") -%}
                         2
                       {%- elif is_state("input_select.vacuum_work_station_freq", "Every third") -%}
                         3
                       {% else %}
                       {% endif %}
            - conditions:
                - condition: trigger
                  id: "vacuum_mode"
              sequence:
                - service: xiaomi_miot.set_miot_property
                  data:
                    entity_id: vacuum.vacuum_cleaner_robot_cleaner
                    did: !secret xiaomi_cloud_did
                    siid: 2
                    piid: 4
                    value: >
                       {%- if is_state("input_select.vacuum_mode", "Sweep") -%}
                         0
                       {%- elif is_state("input_select.vacuum_mode", "Silent") -%}
                         1
                       {%- elif is_state("input_select.vacuum_mode", "Basic") -%}
                         2
                       {%- elif is_state("input_select.vacuum_mode", "Strong") -%}
                         3
                       {%- elif is_state("input_select.vacuum_mode", "Full Speed") -%}
                         4
                       {% else %}
                       {% endif %}
            - conditions:
                - condition: trigger
                  id: "vacuum_sweep_type"
              sequence:
                - service: xiaomi_miot.set_miot_property
                  data:
                    entity_id: vacuum.vacuum_cleaner_robot_cleaner
                    did: !secret xiaomi_cloud_did
                    siid: 2
                    piid: 8
                    value: >
                       {%- if is_state("input_select.vacuum_sweep_type", "Sweep") -%}
                         0
                       {%- elif is_state("input_select.vacuum_sweep_type", "Mop") -%}
                         1
                       {%- elif is_state("input_select.vacuum_sweep_type", "Mop And Sweep") -%}
                         2
                       {% else %}
                       {% endif %}

    # Turn on night mode
    - alias: 'vacuum_nigth_on'
      trigger:
        platform: time
        at: "22:00:00"
      action:
        - service: xiaomi_miot.set_miot_property
          data:
            entity_id: vacuum.vacuum_cleaner_robot_cleaner
            did: !secret xiaomi_cloud_did
            siid: 9
            piid: 2
            value: "1"
    
    # Disable night mode
    - alias: 'vacuum_nigth_off'
      trigger:
        platform: time
        at: "07:00:00"
      action:
        - service: xiaomi_miot.set_miot_property
          data:
            entity_id: vacuum.vacuum_cleaner_robot_cleaner
            did: !secret xiaomi_cloud_did
            siid: 9
            piid: 2
            value: "0"

  script:
    vacuum_download_map:
      alias: "Download a map from the cloud"
      mode: single
      icon: mdi:cloud-download-outline
      sequence:
        - service: homeassistant.update_entity
          data:
            entity_id: camera.xiaomi_cloud_map_extractor
        - delay: '00:00:02'
        - service: homeassistant.update_entity
          data:
            entity_id: camera.xiaomi_cloud_map_extractor
        - delay: '00:00:02'
        - service: homeassistant.update_entity
          data:
            entity_id: camera.xiaomi_cloud_map_extractor
        - delay: '00:00:02'
        - service: homeassistant.update_entity
          data:
            entity_id: camera.xiaomi_cloud_map_extractor

    vacuum_start_clean:
      alias: "Cleaning rooms according to the list"
      icon: mdi:delete-sweep-outline
      mode: single
      sequence:
        - condition: template
          value_template: |
            {% if is_state('input_boolean.vacuum_room1','on') or 
            is_state('input_boolean.vacuum_room2','on') or
            is_state('input_boolean.vacuum_room3','on') or
            is_state('input_boolean.vacuum_room4','on') or
            is_state('input_boolean.vacuum_room5','on') or
            is_state('input_boolean.vacuum_room6','on')%}True{% else %}False{% endif %}
        - service: script.turn_on
          entity_id: script.telegram_send_message
          data_template:
            variables:
              emoji: "\U0001F9F9"
              message: |
                {%- set text = '' %}
                {%- if is_state('input_boolean.vacuum_room1','on') %}{% set text = state_attr('input_boolean.vacuum_room1','friendly_name') %}{% endif %}
                {%- if is_state('input_boolean.vacuum_room2','on') %}
                  {%- if text != '' %}{% set text = text+',' %}{% endif %}
                  {% set text = text+state_attr('input_boolean.vacuum_room2','friendly_name') %}{% endif %}
                {%- if is_state('input_boolean.vacuum_room3','on') %}
                  {%- if text != '' %}{% set text = text+',' %}{% endif %}
                  {% set text = text+state_attr('input_boolean.vacuum_room3','friendly_name') %}{% endif %}
                {%- if is_state('input_boolean.vacuum_room4','on') %}
                  {%- if text != '' %}{% set text = text+',' %}{% endif %}
                  {% set text = text+state_attr('input_boolean.vacuum_room4','friendly_name') %}{% endif %}
                {%- if is_state('input_boolean.vacuum_room5','on') %}
                  {%- if text != '' %}{% set text = text+',' %}{% endif %}
                  {% set text = text+state_attr('input_boolean.vacuum_room5','friendly_name') %}{% endif %}
                {%- if is_state('input_boolean.vacuum_room6','on') %}
                  {%- if text != '' %}{% set text = text+',' %}{% endif %}
                  {% set text = text+state_attr('input_boolean.vacuum_room6','friendly_name') %}{% endif %}
                Selected rooms for cleaning: {{text}}
              target:
                - !secret telegram_bot_chat_id_sasha
              sound: "auto"
        - service: script.turn_on
          entity_id: script.vacuum_clean_select_room
          data_template:
            variables:
              rooms: |
                {%- set text = '' -%}
                {%- if is_state('input_boolean.vacuum_room1','on') %}{%- set text = '1' %}{% endif %}
                {%- if is_state('input_boolean.vacuum_room2','on') %}
                  {%- if text != '' %}{%- set text = text+',' %}{% endif %}
                  {%- set text = text+'2' %}{% endif %}
                {%- if is_state('input_boolean.vacuum_room3','on') %}
                  {%- if text != '' %}{%- set text = text+',' %}{% endif %}
                  {%- set text = text+'3' %}{% endif %}
                {%- if is_state('input_boolean.vacuum_room4','on') %}
                  {%- if text != '' %}{%- set text = text+',' %}{% endif %}
                  {%- set text = text+'4' %}{% endif %}
                {%- if is_state('input_boolean.vacuum_room5','on') %}
                  {%- if text != '' %}{%- set text = text+',' %}{% endif %}
                  {%- set text = text+'5' %}{% endif %}
                {%- if is_state('input_boolean.vacuum_room6','on') %}
                  {%- if text != '' %}{%- set text = text+',' %}{% endif %}
                  {%- set text = text+'6' %}{% endif %}
                {%- set text = '[2,"{\\"mapId\\":1626189155,\\"segmentId\\":[' + text + ']}"]' %}
                {{text}}

    vacuum_clean_select_room:
      alias: 'Cleaning of selected rooms'
      mode: single
      fields:
        rooms:
          description: 'Command with room numbers'
          example: 'Specifies the full cleaning command of the room'
      sequence:
        - service: xiaomi_miot.call_action
          data:
            entity_id: vacuum.vacuum_cleaner_robot_cleaner
            did: !secret xiaomi_cloud_did
            siid: 14
            aiid: 1
            params: "{{ rooms }}"

    vacuum_start_clean_all:
      alias: "Cleaning the entire apartment"
      icon: mdi:vacuum-outline
      mode: single
      sequence:
        - service: vacuum.start
          data:
            entity_id: vacuum.vacuum_cleaner_robot_cleaner

    vacuum_reset_brush_life_level:
      alias: "Reset readings"
      icon: mdi:backup-restore
      mode: single
      sequence:
        - service: xiaomi_miot.call_action
          data:
            entity_id: vacuum.vacuum_cleaner_robot_cleaner
            siid: 11
            aiid: 1
            params: []
            throw: false
        - delay: '00:20:00'

    vacuum_reset_brush_life_level_2:
      alias: "Reset readings"
      icon: mdi:backup-restore
      mode: single
      sequence:
        - service: xiaomi_miot.call_action
          data:
            entity_id: vacuum.vacuum_cleaner_robot_cleaner
            siid: 12
            aiid: 1
            params: []
            throw: false
        - delay: '00:20:00'

    vacuum_reset_brush_life_level_3:
      alias: "Reset readings"
      icon: mdi:backup-restore
      mode: single
      sequence:
        - service: xiaomi_miot.call_action
          data:
            entity_id: vacuum.vacuum_cleaner_robot_cleaner
            siid: 15
            aiid: 1
            params: []
            throw: false
        - delay: '00:20:00'

    vacuum_reset_filter_life_level:
      alias: "Reset readings"
      icon: mdi:backup-restore
      mode: single
      sequence:
        - service: xiaomi_miot.call_action
          data:
            entity_id: vacuum.vacuum_cleaner_robot_cleaner
            siid: 10
            aiid: 1
            params: []
            throw: false
        - delay: '00:20:00'
